// Auto-generated API client
// DO NOT EDIT - This file is automatically generated

export interface ExperimentSummary {
  experiment_id: string;
  name: string;
  run_count: number;
  artifact_location: string;
  lifecycle_stage: string;
}

export interface RunMetrics {
  run_id: string;
  experiment_id: string;
  status: string;
  start_time?: number;
  end_time?: number;
  metrics: Record<string, any>;
  params: Record<string, any>;
  tags: Record<string, any>;
}

export interface ExperimentInsights {
  total_runs: number;
  successful_runs: number;
  failed_runs: number;
  running_runs: number;
  metrics_summary: Record<string, any>;
  parameter_analysis: Record<string, any>;
}

class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string = '') {
    this.baseUrl = baseUrl;
  }

  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });

    if (!response.ok) {
      throw new Error(`API request failed: ${response.status} ${response.statusText}`);
    }

    return response.json();
  }

  // Experiments endpoints
  async getExperiments(): Promise<ExperimentSummary[]> {
    return this.request<ExperimentSummary[]>('/api/insights/experiments');
  }

  async getExperimentRuns(experimentId: string, limit: number = 100): Promise<RunMetrics[]> {
    return this.request<RunMetrics[]>(`/api/insights/experiments/${experimentId}/runs?limit=${limit}`);
  }

  async getExperimentInsights(experimentId: string): Promise<ExperimentInsights> {
    return this.request<ExperimentInsights>(`/api/insights/experiments/${experimentId}/insights`);
  }

  // Health check
  async getHealth(): Promise<{ status: string }> {
    return this.request<{ status: string }>('/health');
  }
}

export const apiClient = new ApiClient();
export default ApiClient;
